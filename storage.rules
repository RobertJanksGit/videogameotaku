rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is admin
    function isAdmin() {
      let user = firestore.get(/databases/(default)/documents/users/$(request.auth.uid));
      return request.auth != null && 
             user != null && 
             user.data != null && 
             user.data.role == "admin";
    }

    // Helper function to check if user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Sitemap rules
    match /public/{fileName} {
      // Anyone can read the sitemap files
      allow read: if true;
      // Only admins can write sitemap files
      allow write: if isAdmin();
    }

    // Profile images rules
    match /profile-images/{userId}/{imageId} {
      // Anyone can read profile images
      allow read: if true;
      // Users can only upload/update/delete their own profile images
      allow create, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Post images rules
    match /post-images/{imageId} {
      // Anyone can read post images
      allow read: if true;
      // Any authenticated user can create post images
      allow create: if isSignedIn();
      // Allow users to delete their own post images or admins to delete any
      allow delete: if isSignedIn() && (
        // Allow users to delete their own post images
        resource.metadata.userId == request.auth.uid ||
        // Or if they're an admin
        isAdmin()
      );
      // Only admins can update post images
      allow update: if isAdmin();
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
